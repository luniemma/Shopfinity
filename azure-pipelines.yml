# Azure DevOps Pipeline for Shopfinity eCommerce Platform
# Comprehensive CI/CD with testing, security, and deployment

trigger:
  branches:
    include:
    - main
    - develop
    - feature/*
  paths:
    exclude:
    - README.md
    - docs/*

pr:
  branches:
    include:
    - main
    - develop

variables:
  # Build Configuration
  nodeVersion: '18.x'
  dockerRegistryServiceConnection: 'shopfinity-acr'
  imageRepository: 'shopfinity'
  containerRegistry: 'shopfinityacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  backendDockerfilePath: '$(Build.SourcesDirectory)/backend/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Kubernetes Configuration
  kubernetesServiceConnection: 'shopfinity-k8s'
  namespace: 'shopfinity'
  
  # Environment Variables
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    environment: 'production'
    deploymentUrl: 'https://shopfinity.com'
  ${{ elseif eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
    environment: 'staging'
    deploymentUrl: 'https://staging.shopfinity.com'
  ${{ else }}:
    environment: 'development'
    deploymentUrl: 'https://dev.shopfinity.com'

stages:
# 🧪 Testing and Quality Assurance Stage
- stage: TestAndQuality
  displayName: 'Test & Quality Assurance'
  jobs:
  - job: FrontendTests
    displayName: 'Frontend Testing'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
        
    - task: Cache@2
      displayName: 'Cache npm dependencies'
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: ~/.npm
        
    - script: |
        npm ci
      displayName: 'Install dependencies'
      
    - script: |
        npm run lint
      displayName: 'Run ESLint'
      
    - script: |
        npm test -- --coverage --watchAll=false --ci
      displayName: 'Run unit tests'
      
    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'junit.xml'
        mergeTestResults: true
        
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish coverage results'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'coverage/cobertura-coverage.xml'
        
    - script: |
        npm run build
      displayName: 'Build frontend'
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        pathToPublish: 'dist'
        artifactName: 'frontend-build'

  - job: BackendTests
    displayName: 'Backend Testing'
    pool:
      vmImage: 'ubuntu-latest'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_USER: test
          POSTGRES_DB: shopfinity_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test123
        ports:
          - 27017:27017
        options: --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'" --health-interval 10s --health-timeout 5s --health-retries 5
        
    steps:
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
        
    - task: Cache@2
      displayName: 'Cache npm dependencies'
      inputs:
        key: 'npm-backend | "$(Agent.OS)" | backend/package-lock.json'
        restoreKeys: |
          npm-backend | "$(Agent.OS)"
        path: ~/.npm
        
    - script: |
        cd backend
        npm ci
      displayName: 'Install backend dependencies'
      
    - script: |
        cd backend
        npm run lint || echo "ESLint not configured, skipping..."
      displayName: 'Run backend ESLint'
      
    - script: |
        cd backend
        npm test || echo "Tests not configured, skipping..."
      displayName: 'Run backend tests'
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test:test123@localhost:5432/shopfinity_test
        MONGODB_URI: mongodb://test:test123@localhost:27017/shopfinity_test?authSource=admin
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret

  - job: SecurityScan
    displayName: 'Security Scanning'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
        
    - script: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
      displayName: 'Install Trivy'
      
    - script: |
        trivy fs --format sarif --output trivy-results.sarif .
      displayName: 'Run Trivy filesystem scan'
      
    - script: |
        npm audit --audit-level high || echo "Frontend audit completed with warnings"
      displayName: 'Frontend npm audit'
      
    - script: |
        cd backend
        npm audit --audit-level high || echo "Backend audit completed with warnings"
      displayName: 'Backend npm audit'
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish security scan results'
      inputs:
        pathToPublish: 'trivy-results.sarif'
        artifactName: 'security-scan-results'

# 🐳 Build and Push Docker Images Stage
- stage: BuildAndPush
  displayName: 'Build & Push Docker Images'
  dependsOn: TestAndQuality
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
  jobs:
  - job: BuildImages
    displayName: 'Build Docker Images'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: 'login'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        
    - task: Docker@2
      displayName: 'Build Frontend Image'
      inputs:
        command: 'build'
        repository: '$(imageRepository)/frontend'
        dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest
        arguments: '--cache-from $(containerRegistry)/$(imageRepository)/frontend:latest'
        
    - task: Docker@2
      displayName: 'Push Frontend Image'
      inputs:
        command: 'push'
        repository: '$(imageRepository)/frontend'
        tags: |
          $(tag)
          latest
          
    - task: Docker@2
      displayName: 'Build Backend Image'
      inputs:
        command: 'build'
        repository: '$(imageRepository)/backend'
        dockerfile: '$(backendDockerfilePath)'
        tags: |
          $(tag)
          latest
        arguments: '--cache-from $(containerRegistry)/$(imageRepository)/backend:latest'
        
    - task: Docker@2
      displayName: 'Push Backend Image'
      inputs:
        command: 'push'
        repository: '$(imageRepository)/backend'
        tags: |
          $(tag)
          latest
          
    - task: Docker@2
      displayName: 'Scan Frontend Image'
      inputs:
        command: 'run'
        arguments: '--rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image $(containerRegistry)/$(imageRepository)/frontend:$(tag)'
      continueOnError: true
      
    - task: Docker@2
      displayName: 'Scan Backend Image'
      inputs:
        command: 'run'
        arguments: '--rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image $(containerRegistry)/$(imageRepository)/backend:$(tag)'
      continueOnError: true

# 🧪 Integration Testing Stage
- stage: IntegrationTests
  displayName: 'Integration Testing'
  dependsOn: BuildAndPush
  jobs:
  - job: IntegrationTest
    displayName: 'Full Stack Integration Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: 'login'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        
    - script: |
        # Create test docker-compose file
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          frontend:
            image: $(containerRegistry)/$(imageRepository)/frontend:$(tag)
            ports:
              - "3000:80"
            depends_on:
              - backend
              
          backend:
            image: $(containerRegistry)/$(imageRepository)/backend:$(tag)
            ports:
              - "5000:5000"
            environment:
              - NODE_ENV=test
              - DATABASE_URL=postgresql://test:test123@postgres:5432/shopfinity_test
              - MONGODB_URI=mongodb://test:test123@mongo:27017/shopfinity_test?authSource=admin
              - REDIS_URL=redis://redis:6379
              - JWT_SECRET=test-jwt-secret
            depends_on:
              - postgres
              - mongo
              - redis
              
          postgres:
            image: postgres:15
            environment:
              POSTGRES_PASSWORD: test123
              POSTGRES_USER: test
              POSTGRES_DB: shopfinity_test
            ports:
              - "5432:5432"
              
          mongo:
            image: mongo:6.0
            environment:
              MONGO_INITDB_ROOT_USERNAME: test
              MONGO_INITDB_ROOT_PASSWORD: test123
            ports:
              - "27017:27017"
              
          redis:
            image: redis:7-alpine
            ports:
              - "6379:6379"
        EOF
      displayName: 'Create test compose file'
      
    - script: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 60
      displayName: 'Start test services'
      
    - script: |
        # Test frontend
        curl -f http://localhost:3000 || exit 1
        echo "Frontend health check passed"
        
        # Test backend health
        curl -f http://localhost:5000/health || exit 1
        echo "Backend health check passed"
        
        # Test API endpoints
        curl -f http://localhost:5000/api/products || exit 1
        echo "API endpoints working"
      displayName: 'Run integration tests'
      
    - script: |
        docker-compose -f docker-compose.test.yml logs
      displayName: 'Collect service logs'
      condition: always()
      
    - script: |
        docker-compose -f docker-compose.test.yml down -v
      displayName: 'Cleanup test services'
      condition: always()

# 🚀 Deployment Stage
- stage: Deploy
  displayName: 'Deploy to $(environment)'
  dependsOn: IntegrationTests
  jobs:
  - deployment: DeployToKubernetes
    displayName: 'Deploy to Kubernetes'
    pool:
      vmImage: 'ubuntu-latest'
    environment: '$(environment)'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: KubernetesManifest@0
            displayName: 'Create namespace'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              manifests: 'k8s/namespace.yaml'
              
          - task: KubernetesManifest@0
            displayName: 'Deploy ConfigMaps and Secrets'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              manifests: |
                k8s/configmaps/
                k8s/secrets/
                
          - task: KubernetesManifest@0
            displayName: 'Deploy Storage'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              manifests: 'k8s/storage/'
              
          - task: KubernetesManifest@0
            displayName: 'Deploy Databases'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              manifests: |
                k8s/databases/
                k8s/cache/
                k8s/messaging/
                
          - task: KubernetesManifest@0
            displayName: 'Deploy Applications'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              manifests: |
                k8s/backend/
                k8s/frontend/
              containers: |
                $(containerRegistry)/$(imageRepository)/frontend:$(tag)
                $(containerRegistry)/$(imageRepository)/backend:$(tag)
                
          - task: KubernetesManifest@0
            displayName: 'Deploy Ingress'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              manifests: 'k8s/ingress/'
              
          - script: |
            kubectl rollout status deployment/frontend -n $(namespace) --timeout=300s
            kubectl rollout status deployment/backend -n $(namespace) --timeout=300s
          displayName: 'Wait for deployment'
          
          - script: |
            sleep 60
            curl -f $(deploymentUrl)/health || echo "Health check failed"
          displayName: 'Smoke tests'

# 📊 Performance Testing Stage
- stage: PerformanceTests
  displayName: 'Performance Testing'
  dependsOn: Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - job: PerformanceTest
    displayName: 'Performance & Load Testing'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
        
    - script: |
        npm install -g @lhci/cli@0.12.x
      displayName: 'Install Lighthouse CI'
      
    - script: |
        lhci autorun --upload.target=temporary-public-storage
      displayName: 'Run Lighthouse CI'
      env:
        LHCI_GITHUB_APP_TOKEN: $(LHCI_GITHUB_APP_TOKEN)
        
    - script: |
        # Install k6
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
      displayName: 'Install k6'
      
    - script: |
        if [ -f "tests/load/basic-load-test.js" ]; then
          k6 run tests/load/basic-load-test.js --env BASE_URL=$(deploymentUrl)
        else
          echo "Load test files not found, skipping..."
        fi
      displayName: 'Run load tests'

# 📢 Notification Stage
- stage: Notification
  displayName: 'Send Notifications'
  dependsOn: 
  - Deploy
  - PerformanceTests
  condition: always()
  jobs:
  - job: SendNotification
    displayName: 'Send Deployment Notification'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        if [ "$(Agent.JobStatus)" = "Succeeded" ]; then
          STATUS="✅ SUCCESS"
          COLOR="good"
        else
          STATUS="❌ FAILED"
          COLOR="danger"
        fi
        
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\":\"Shopfinity Deployment Notification\",
          \"attachments\":[{
            \"color\":\"$COLOR\",
            \"fields\":[{
              \"title\":\"Environment\",
              \"value\":\"$(environment)\",
              \"short\":true
            },{
              \"title\":\"Status\",
              \"value\":\"$STATUS\",
              \"short\":true
            },{
              \"title\":\"Build\",
              \"value\":\"$(Build.BuildNumber)\",
              \"short\":true
            },{
              \"title\":\"URL\",
              \"value\":\"$(deploymentUrl)\",
              \"short\":true
            }]
          }]
        }" \
        $(SLACK_WEBHOOK_URL)
      displayName: 'Send Slack notification'
      condition: and(always(), ne(variables['SLACK_WEBHOOK_URL'], ''))